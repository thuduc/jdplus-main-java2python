/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jdplus.toolkit.desktop.plugin.workspace.ui;

import jdplus.toolkit.desktop.plugin.workspace.CalendarDocumentManager;
import jdplus.toolkit.desktop.plugin.workspace.WorkspaceFactory;
import jdplus.toolkit.desktop.plugin.workspace.WorkspaceItem;
import jdplus.toolkit.base.api.timeseries.calendars.CalendarDefinition;
import jdplus.toolkit.base.api.timeseries.calendars.CalendarManager;
import java.awt.BorderLayout;

import nbbrd.design.ClassNameConstant;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.explorer.ExplorerManager;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//demetra.desktop.workspace.ui//Calendar//EN",
        autostore = false)
@TopComponent.Description(preferredID = "CalendarTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = CalendarTopComponent.ID)
@TopComponent.OpenActionRegistration(displayName = "#CTL_CalendarAction",
        preferredID = "CalendarTopComponent")
@Messages({
    "CTL_CalendarAction=Calendar",
    "CTL_CalendarTopComponent=Calendar Window",
    "HINT_CalendarTopComponent=This is a Calendar window"
})
public final class CalendarTopComponent extends WorkspaceTopComponent<CalendarDefinition> {

    @ClassNameConstant
    public static final String ID = "jdplus.toolkit.desktop.plugin.workspace.ui.CalendarTopComponent";

    private final transient ExplorerManager explorerManager = new ExplorerManager();
    private final JCalendarView view = new JCalendarView();

    public CalendarTopComponent() {
        this((WorkspaceItem<CalendarDefinition>) WorkspaceFactory.getInstance().getActiveWorkspace().
                searchDocument(CalendarDocumentManager.ID, CalendarManager.DEF));
    }

    public CalendarTopComponent(WorkspaceItem<CalendarDefinition> calendar) {
        super(calendar);
        initComponents();
        setToolTipText(Bundle.HINT_CalendarTopComponent());
        view.setCalendar(calendar.getElement());
        add(view, BorderLayout.CENTER);
    }

    @Override
    public WorkspaceItem<CalendarDefinition> newDocument() {
        return (WorkspaceItem<CalendarDefinition>) WorkspaceFactory.getInstance().getActiveWorkspace().
                searchDocument(CalendarDocumentManager.ID, CalendarManager.DEF);
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void refresh() {
        view.setCalendar(getDocument().getElement());
    }

}
